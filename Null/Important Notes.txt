						**NULLS**
					=========================
	1) A NullReferenceException exception is thrown when you try to access a member on a type whose value is null.
	2) A software design pattern that uses object-orientation to remove or reduce the amount of null reference exceptions.
-------------------------------------------------------------------------------------------------------------------------------
**Reference and value Types:
	1) Value Type:
		a) If we want ot create our own value type we create a struct.
		b) Instances of value types are independent instances or copies of that information.
		c) When we make a change in value type it doesn't affect other copies of that value type.
		d) The value is the information.
		e) The value type doesn,t have the reference and so it cannot be null.
		f) Value type cannot be null so we don't need to add additional null checking code.
	2) Reference Type: 
		a) If we want ot create our own reference type we create a class.
		b) Instances of reference types are single shared instance pointed to by multiple references.
		c) If we make change in reference type it will affect all references pointint to it.
		d) The reference points to the information.
		e) While working with reference type reference may in fact point to nothing or null.
		f) In reference type we have to add additional null checking code to prevent the NullReferenceException.
-------------------------------------------------------------------------------------------------------------------------------
**NullReferenceException:
	1) A NullReferenceException exception is thrown when you try to access a member on a type whose value is null.
	2) When we try get/set Property, Call method or we try get/set field on null
	   instance we will get a NullReferenceException.
	3) If we wan to check the null value then we can use == or != operator, alos you can use the pattern matching like
	   "xyz is null" or "xyz is not null".
-----------------------------------------------------------------------------------------------------------------------------
**Magic Number:
	1) The value types are cannot be null but if we have such kind of condition where we have to make value types null
	   so instead we might choose to use a concept called Magic Numbers.
	2) A magic number is eesentialoly an arbitrary value that we decide represents a null value.
---------------------------------------------------------------------------------------------------------------------------
**Nullable<T>:
	1) Instead of using Magic Number to make value types null we can use Nullable<T> struct to create new 
	   nullable value types.
	2) A nullable value type is an instance of the System.Nullable<T> struct. A nullable value type can represent
	   all the values of the value type T, plus an additional null value.
	3) Instead of writing Nullable<T> we can simply write ? in front of type e.g. 'T?'.
	4) We dont't need to explicitly write value is null because the default value of Nullable<T> is null.
	5) Properties and methods of Nullable<t> are;
		a) .HasValue: Non- nullable Boolean and it will be set to false if the nullable value types value is currently
		              set to null, otherwise it will return to true.
		b) .Value: Once we have determine that the nullable value type is not set to null we can acess the underlying 
			   value with the Value property.If we use value property with HasVlaue and if HasVGalue is false 
			   then we get runtime error.
		c) .GetValueOrDefault(): When we call this method, it's going to check whether or not the nullable value type
					 is set to null. If it is not set to null it give us the underlying value and if set 
					 to  null it will give us default value of type.
					 We can also overload this method by default so we can set the default value for that type.
	6) When we compare two variables with same value it gives true but in Nullable when we declare nullable variable if both value 
	   null then it show true, one value is null and other value is not null then it show false.
	7) Conversion between the Non-Nullable to Nullable doesn't require the explicit conversion it is implicit conversion but for 
	   conversion of Nullable to Non-nullable we have to perform explicit conversion.
---------------------------------------------------------------------------------------------------------------------------------------
**C# Null-related Operators:
	1)Conditional Operator:  (?:)
	2) Null-coalescing operator:  (??)
	3) Null-coalescing assignment operator: (??=)
	4) Null-conditional operator: (?.)
	5) Null-conditional operator with arrays: (?[])
	6) Null-forgiving operator: (!)
---------------------------------------------------------------------------------------------------------------------------------------
**Elimininating Null Reference Exceptions with the Null Object Pattern:
	1) With the help of Null object pattern we can eliminate null reference exception and also reduce the amount of repetitive
	   checking code.
	2) A software design pattern that uses object-orientation to remove or reduce the amount of null reference exception is called
	   Null Object Pattern.
	3) By implementing the pattern, the burden of repetitive null checking code can also be reduced in the codebase.
	4) By implimenting the Null Object Pattern 
		-Reduce incidences of runtime null reference exceptions
		-Reduce the amount of repetitive null checking code we have to write
		-Simplify production and test code
		-Fewer branches in program control flow
		-Reduce maintenance overheads, "do nothing" code exist in one centralized place
	5) We can apply Object Pattern by :
		a) Using Interface.
		b) Using Abstract Base class.
------------------------------------------------------------------------------------------------------------------------------------------
**Considerations of Null Object Pattern:
	1) Can be implemented in older versions of C#
	2) May only be worthwhile if there are many repetitive null checks throughout codebase
	3) All developers need to be aware that the null object pattern is in use
	4) All calling client code needs to understand on what "do nothing" behaviour is
	5) Usually not used for error handling
	6) can hide exceptions and make fault finding harder
	7) Don't try to remove all null values from your code instead express your intent
	8) When you are working with non nullable it is not consider to be our code is completely null safe.
	9) 
----------------------------------------------------------------------------------------------------------------------------------------
**Null Features:
	1) Use of Null Directives to convert Nullable references to Non-nullable references.
	2) Write nullable element in csproj file to make entire project null checking and if we want some line to be not null checked 
	   we can use the #nullable disable and #nullable enable with that lines to make that lines free from null checkings.
	3) If we make a entire project non nullable reference and we want to make varible as a nullable reference then me just add a '?'
	   to a variable type which makes that variable nullable reference type.
	4) We can also work with Generics along with nullable and Non nullable. In non nullable collection we can only store the non nullable type
	   but in nullable collction we can store both nullable and non nullable types.
----------------------------------------------------------------------------------------------------------------------------------------------------
**Nullable-describing Attributes:
	1) Attributes that you can apply to your code when using non nullable reference types to further express your design intent.
	   These attributes are understood by the compiler and enable improved comile-time checking of null relaterd intent violations.
	2) Using these attributes only makes sense when you have the new nullable features enabled.
	3) There are five types of attributes:
		a) Precondition:
			a.1) AllowNull
			a.2) DisallowNull
		b) Postcondition:
			b.1) MaybeNull
			b.2) NotNull
		c) Conditional postcondition
			c.1) MaybeNullWhen
			c.2) NotNullWhen
			c.3) NotNullNotNull
		d) Constructor helper methods
			d.1) MemberNotNull
			d.2) MemberNotNullWhen
		e) Unreachable code
			e.1) DoesNotReturn
			e.2) DoesNotReturnIf
-----------------------------------------------------------------------------------------------------------------------------------------------------------
**Precondition Attributes:
	1) Precondition allow us to express nullability intent before an action takes place.
	a.1) [AllowNull]: You apply this attribute to a field, a method parametere or a property. When you add this attribute to a property,
			  it only applies to the property setter value. The AllowNull atribute allows you to express the intent that a non nullable 
			  type is normally not null, but may occasionally actually be null.
	a.2) [DisallowNull]: You apply this attribute to a field, a method parametere or a property. When you add this attribute to a property,
			     it only applies to the property setter value. The DisallowNull atribute allows you to express the design intent that a nullable 
			     type may be null.    


	

		    

























  
 